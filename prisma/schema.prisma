generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./json"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model audit {
  auditID          Int       @id @default(autoincrement())
  auditIP          String?   @db.VarChar(255)
  auditURL         String?   @db.VarChar(255)
  auditURLMethod   String?   @db.VarChar(255)
  auditURLPayload  String?   @db.VarChar(255)
  auditCreatedDate DateTime? @db.DateTime(0)
}

model user {
  userID           Int        @id @default(autoincrement())
  userSecretKey    String?    @db.VarChar(255)
  userUsername     String?    @db.VarChar(255)
  userPassword     String?    @db.VarChar(255)
  userFullName     String?    @db.VarChar(255)
  userEmail        String?    @db.VarChar(255)
  userPhone        String?    @db.VarChar(255)
  userStatus       String?    @db.VarChar(255)
  userCreatedDate  DateTime?  @db.DateTime(0)
  userModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model role {
  roleID           Int        @id @default(autoincrement())
  roleName         String?    @db.VarChar(255)
  roleDescription  String?    @db.VarChar(255)
  roleStatus       String?    @db.VarChar(255)
  roleCreatedDate  DateTime?  @db.DateTime(0)
  roleModifiedDate DateTime?  @db.DateTime(0)
  userrole         userrole[]
}

model lookup {
  lookupID           Int       @id @default(autoincrement())
  lookupOrder        Int?
  lookupTitle        String?   @db.VarChar(255)
  lookupRefCode      String?   @db.VarChar(255)
  lookupValue        String?   @db.VarChar(255)
  lookupType         String?   @db.VarChar(255)
  lookupStatus       String?   @db.VarChar(255)
  lookupCreatedDate  DateTime? @db.DateTime(0)
  lookupModifiedDate DateTime? @db.DateTime(0)
}

model userrole {
  userRoleID          Int      @id @default(autoincrement())
  userRoleUserID      Int      @default(0)
  userRoleRoleID      Int      @default(0)
  userRoleCreatedDate DateTime @db.DateTime(0)
  role                role     @relation(fields: [userRoleRoleID], references: [roleID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_role")
  user                user     @relation(fields: [userRoleUserID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "FK_userrole_user")

  @@index([userRoleRoleID], map: "FK_userrole_role")
  @@index([userRoleUserID], map: "FK_userrole_user")
}

model Book {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  author          String    @db.VarChar(255)
  isbn            String    @unique @db.VarChar(50)
  category        String    @db.VarChar(100)
  publishedYear   Int
  copies          Int       @default(1)
  availableCopies Int       @default(1)
  description     String?   @db.Text
  coverImage      String?   @db.VarChar(500)
  status          String    @default("active") @db.VarChar(50)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  Booking         Booking[]
}

model Booking {
  id          Int         @id @default(autoincrement())
  bookId      Int
  userId      Int
  borrowDate  DateTime    @default(now())
  dueDate     DateTime
  returnDate  DateTime?
  status      String      @default("borrowed") @db.VarChar(50)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Book        Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  LibraryUser LibraryUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([bookId])
  @@index([status])
  @@index([userId])
}

model LibraryUser {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  fullName  String    @db.VarChar(255)
  phone     String?   @db.VarChar(50)
  role      String    @default("member") @db.VarChar(50)
  status    String    @default("active") @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Booking   Booking[]
}

model site_settings {
  settingID            Int       @id @default(autoincrement())
  siteName             String?   @db.VarChar(255)
  siteNameFontSize     Int?      @default(18)
  siteDescription      String?   @db.Text
  siteLogo             String?   @db.VarChar(500)
  siteLoadingLogo      String?   @db.VarChar(500)
  siteFavicon          String?   @db.VarChar(500)
  showSiteNameInHeader Boolean?  @default(true)
  primaryColor         String?   @db.VarChar(50)
  secondaryColor       String?   @db.VarChar(50)
  successColor         String?   @db.VarChar(50)
  infoColor            String?   @db.VarChar(50)
  warningColor         String?   @db.VarChar(50)
  dangerColor          String?   @db.VarChar(50)
  customCSS            String?   @db.Text
  themeMode            String?   @db.VarChar(50)
  customThemeFile      String?   @db.VarChar(500)
  currentFont          String?   @db.VarChar(255)
  fontSource           String?   @db.VarChar(500)
  seoTitle             String?   @db.VarChar(255)
  seoDescription       String?   @db.Text
  seoKeywords          String?   @db.Text
  seoAuthor            String?   @db.VarChar(255)
  seoOgImage           String?   @db.VarChar(500)
  seoTwitterCard       String?   @default("summary_large_image") @db.VarChar(50)
  seoCanonicalUrl      String?   @db.VarChar(500)
  seoRobots            String?   @default("index, follow") @db.VarChar(100)
  seoGoogleAnalytics   String?   @db.VarChar(255)
  seoGoogleTagManager  String?   @db.VarChar(255)
  seoFacebookPixel     String?   @db.VarChar(255)
  settingCreatedDate   DateTime? @db.DateTime(0)
  settingModifiedDate  DateTime? @db.DateTime(0)
  siteLoginLogo        String?   @db.VarChar(500)
}

model ticket {
  ticketId    Int      @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  priority    String   @default("medium")
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}
